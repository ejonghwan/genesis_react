{"version":3,"file":"static/js/97.cc0d3d9c.chunk.js","mappings":"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","sources":["components/main/carVisual/Suv.js"],"sourcesContent":["import React, { Fragment, useEffect, useRef } from 'react';\r\nimport { Swiper, SwiperSlide, useSwiper  } from 'swiper/react';\r\nimport { Navigation, Autoplay, EffectFade  } from 'swiper/modules';\r\nimport 'swiper/scss';\r\nimport 'swiper/scss/navigation';\r\nimport 'swiper/scss/pagination';\r\nimport ClipAni from '../../../utils/ClipAni';\r\n\r\nconst Suv = ({ data }) => {\r\n\r\n    const carWrapRef = useRef(null);\r\n    let cars = useRef(null);\r\n    let carImgs = useRef(null);\r\n    let colors = useRef(null);\r\n    let color_names = useRef(null);\r\n    let prev_el = useRef(null);\r\n  \r\n    const handleColorClick = (carData) => () => {\r\n        // if(prev_el) { prev_el.current.style.zIndex = 1; }\r\n        for(let i = 0; i < cars.current.length; i++) {\r\n            cars.current[i].classList.remove('on')\r\n            colors.current[i].classList.remove('on')\r\n            color_names.current[i].classList.remove('on')\r\n\r\n            if(carData === cars.current[i].dataset.car) {\r\n                cars.current[i].classList.add('on')\r\n                colors.current[i].classList.add('on')\r\n                color_names.current[i].classList.add('on')\r\n                \r\n                new ClipAni(carImgs.current[i], {\r\n                    limit: window.innerWidth,\r\n                    els: carImgs.current,\r\n                    prev_el: prev_el.current,\r\n                    duration: 300,\r\n                    callback: () => {\r\n                        prev_el.current = carImgs.current[i];\r\n                        // console.log('prevel?', prev_el.current)\r\n                    }\r\n                })\r\n                \r\n            }\r\n        }\r\n    } \r\n\r\n    useEffect(() => {\r\n        cars.current = carWrapRef.current?.querySelectorAll('.car')\r\n        carImgs.current = carWrapRef.current.querySelectorAll('.car_img')\r\n        colors.current = carWrapRef.current.querySelectorAll('.color')\r\n        color_names.current = carWrapRef.current.querySelectorAll('.color_name')\r\n        prev_el.current = carImgs.current[0];\r\n    }, [])\r\n\r\n    return (\r\n        <Fragment>\r\n            <Swiper \r\n                className=\"tab_suv \" \r\n                modules={[ Navigation, Autoplay, EffectFade ]} \r\n                navigation={true}\r\n                effect={\"fade\"}\r\n                observer={true}\r\n                observeParents={true}\r\n                // autoplay={{ delay: 1500, disableOnInteraction: false }}\r\n                // loop={true}\r\n                ref={carWrapRef}\r\n            >\r\n\r\n                {data.map((car, idx) => {\r\n                    return (\r\n                        <SwiperSlide key={idx}>\r\n                             <strong className=\"main_car_title\">{car.carName}</strong> \r\n                             <div className=\"main_car_info\">\r\n                                <div className=\"car_outer\">\r\n                                    {car.outerColor.map((color, idx) => {\r\n                                        return (\r\n                                            <Fragment key={idx}>\r\n                                                <div className=\"car_wrap\">\r\n                                                    {color.value.map((value, idx) => {\r\n                                                        return (\r\n                                                            <div  className={`car ${idx === 0 && color.type === 'u' && 'on'}`} data-car={`${car.carName}_${color.type}_${idx}`} key={idx}>\r\n                                                                <img className=\"car_img\" src={require(`../../../assets/images/car/${car.carName}/${value.car}`)} alt={`${car.carName} ${value.colorName} 색 차량 이미지`} loading=\"lazy\" />\r\n                                                            </div>\r\n                                                        )\r\n                                                    })}\r\n                                                </div>\r\n                                            </Fragment>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                                <div className=\"color_outer\">\r\n                                    {car.outerColor.map((color, idx) => {\r\n                                        return (\r\n                                            <Fragment key={idx}>\r\n                                                <p>{color.material}</p>\r\n                                                <div className=\"color_wrap\">\r\n                                                    {color.value.map((value, idx) => {\r\n                                                        return (\r\n                                                            <div key={idx}>\r\n                                                                <button type=\"button\"  className={`color ${idx === 0 && 'on'}`} data-color={`${car.carName}_${color.type}_${idx}`} onClick={handleColorClick(`${car.carName}_${color.type}_${idx}`)}>\r\n                                                                    <img src={require(`../../../assets/images/car/${car.carName}/${value.color}`)} alt={value.colorName} loading=\"lazy\" />\r\n                                                                </button>\r\n                                                            </div>\r\n                                                        )\r\n                                                    } )}\r\n                                                </div>\r\n                                                <div className=\"color_name_wrap\">\r\n                                                    {color.value.map((value, idx) => {\r\n                                                        return (\r\n                                                            <span className={`color_name ${idx === 0 && color.type === 'u' &&  'on'}`} data-colorname={`${car.carName}_${color.type}_${idx}`} key={idx}>\r\n                                                                {value.colorName}\r\n                                                            </span>\r\n                                                        )\r\n                                                    } )}\r\n                                                </div>\r\n                                            </Fragment>\r\n                                        )\r\n                                        \r\n                                    })}\r\n                                </div>\r\n\r\n                             </div>\r\n\r\n                        </SwiperSlide>\r\n                    )\r\n                })}\r\n\r\n            </Swiper>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Suv;"],"names":["_ref","data","carWrapRef","useRef","cars","carImgs","colors","color_names","prev_el","useEffect","_carWrapRef$current","current","querySelectorAll","_jsx","Fragment","children","Swiper","className","modules","Navigation","Autoplay","EffectFade","navigation","effect","observer","observeParents","ref","map","car","idx","_jsxs","SwiperSlide","carName","outerColor","color","value","concat","type","src","require","alt","colorName","loading","material","onClick","carData","_loop","i","classList","remove","dataset","add","ClipAni","limit","window","innerWidth","els","duration","callback","length"],"sourceRoot":""}